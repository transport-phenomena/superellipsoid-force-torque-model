#include "resRotTensors.h"

// ---------------------------------------------------------- //
// Basic equation for all K,Omega,Pi functions                //
// ---------------------------------------------------------- //
double eqQ( double A[16][9], double x1, double x2, double x3, double x4 )
{

	double Q =      A[15][8]*pow(x1,3)*pow(x2,3)*pow(x3,2)*pow(x4,2) + A[15][7]*pow(x1,3)*pow(x2,3)*pow(x3,2)*x4 + 
                    A[15][6]*pow(x1,3)*pow(x2,3)*pow(x3,2) + A[15][5]*pow(x1,3)*pow(x2,3)*x3*pow(x4,2) + 
                    A[15][4]*pow(x1,3)*pow(x2,3)*x3*x4 + A[15][3]*pow(x1,3)*pow(x2,3)*x3 + 
                    A[15][2]*pow(x1,3)*pow(x2,3)*pow(x4,2) + A[15][1]*pow(x1,3)*pow(x2,3)*x4 + 
                    A[15][0]*pow(x1,3)*pow(x2,3) + A[14][8]*pow(x1,3)*pow(x2,2)*pow(x3,2)*pow(x4,2) + 
                    A[14][7]*pow(x1,3)*pow(x2,2)*pow(x3,2)*x4 + A[14][6]*pow(x1,3)*pow(x2,2)*pow(x3,2) + 
                    A[14][5]*pow(x1,3)*pow(x2,2)*x3*pow(x4,2) + A[14][4]*pow(x1,3)*pow(x2,2)*x3*x4 + 
                    A[14][3]*pow(x1,3)*pow(x2,2)*x3 + A[14][2]*pow(x1,3)*pow(x2,2)*pow(x4,2) + 
                    A[14][1]*pow(x1,3)*pow(x2,2)*x4 + A[14][0]*pow(x1,3)*pow(x2,2) + A[13][8]*pow(x1,3)*x2*pow(x3,2)*pow(x4,2) + 
                    A[13][7]*pow(x1,3)*x2*pow(x3,2)*x4 + A[13][6]*pow(x1,3)*x2*pow(x3,2) + 
                    A[13][5]*pow(x1,3)*x2*x3*pow(x4,2) + A[13][4]*pow(x1,3)*x2*x3*x4 + 
                    A[13][3]*pow(x1,3)*x2*x3 + A[13][2]*pow(x1,3)*x2*pow(x4,2) + A[13][1]*pow(x1,3)*x2*x4 + 
                    A[13][0]*pow(x1,3)*x2 + A[12][8]*pow(x1,3)*pow(x3,2)*pow(x4,2) + A[12][7]*pow(x1,3)*pow(x3,2)*x4 + 
                    A[12][6]*pow(x1,3)*pow(x3,2) + A[12][5]*pow(x1,3)*x3*pow(x4,2) + A[12][4]*pow(x1,3)*x3*x4 + 
                    A[12][3]*pow(x1,3)*x3 + A[12][2]*pow(x1,3)*pow(x4,2) + A[12][1]*pow(x1,3)*x4 + 
                    A[12][0]*pow(x1,3) + A[11][8]*pow(x1,2)*pow(x2,3)*pow(x3,2)*pow(x4,2) + 
                    A[11][7]*pow(x1,2)*pow(x2,3)*pow(x3,2)*x4 + A[11][6]*pow(x1,2)*pow(x2,3)*pow(x3,2) + 
                    A[11][5]*pow(x1,2)*pow(x2,3)*x3*pow(x4,2) + A[11][4]*pow(x1,2)*pow(x2,3)*x3*x4 + 
                    A[11][3]*pow(x1,2)*pow(x2,3)*x3 + A[11][2]*pow(x1,2)*pow(x2,3)*pow(x4,2) + 
                    A[11][1]*pow(x1,2)*pow(x2,3)*x4 + A[11][0]*pow(x1,2)*pow(x2,3) + A[10][8]*pow(x1,2)*pow(x2,2)*pow(x3,2)*pow(x4,2) + 
                    A[10][7]*pow(x1,2)*pow(x2,2)*pow(x3,2)*x4 + A[10][6]*pow(x1,2)*pow(x2,2)*pow(x3,2) + 
                    A[10][5]*pow(x1,2)*pow(x2,2)*x3*pow(x4,2) + A[10][4]*pow(x1,2)*pow(x2,2)*x3*x4 + 
                    A[10][3]*pow(x1,2)*pow(x2,2)*x3 + A[10][2]*pow(x1,2)*pow(x2,2)*pow(x4,2) + 
                    A[10][1]*pow(x1,2)*pow(x2,2)*x4 + A[10][0]*pow(x1,2)*pow(x2,2) + A[9][8]*pow(x1,2)*x2*pow(x3,2)*pow(x4,2) + 
                    A[9][7]*pow(x1,2)*x2*pow(x3,2)*x4 + A[9][6]*pow(x1,2)*x2*pow(x3,2) + 
                    A[9][5]*pow(x1,2)*x2*x3*pow(x4,2) + A[9][4]*pow(x1,2)*x2*x3*x4 + A[9][3]*pow(x1,2)*x2*x3 + 
                    A[9][2]*pow(x1,2)*x2*pow(x4,2) + A[9][1]*pow(x1,2)*x2*x4 + A[9][0]*pow(x1,2)*x2 + 
                    A[8][8]*pow(x1,2)*pow(x3,2)*pow(x4,2) + A[8][7]*pow(x1,2)*pow(x3,2)*x4 + 
                    A[8][6]*pow(x1,2)*pow(x3,2) + A[8][5]*pow(x1,2)*x3*pow(x4,2) + A[8][4]*pow(x1,2)*x3*x4 + 
                    A[8][3]*pow(x1,2)*x3 + A[8][2]*pow(x1,2)*pow(x4,2) + A[8][1]*pow(x1,2)*x4 + 
                    A[8][0]*pow(x1,2) + A[7][8]*x1*pow(x2,3)*pow(x3,2)*pow(x4,2) + A[7][7]*x1*pow(x2,3)*pow(x3,2)*x4 + 
                    A[7][6]*x1*pow(x2,3)*pow(x3,2) + A[7][5]*x1*pow(x2,3)*x3*pow(x4,2) + 
                    A[7][4]*x1*pow(x2,3)*x3*x4 + A[7][3]*x1*pow(x2,3)*x3 + A[7][2]*x1*pow(x2,3)*pow(x4,2) + 
                    A[7][1]*x1*pow(x2,3)*x4 + A[7][0]*x1*pow(x2,3) + A[6][8]*x1*pow(x2,2)*pow(x3,2)*pow(x4,2) + 
                    A[6][7]*x1*pow(x2,2)*pow(x3,2)*x4 + A[6][6]*x1*pow(x2,2)*pow(x3,2) + 
                    A[6][5]*x1*pow(x2,2)*x3*pow(x4,2) + A[6][4]*x1*pow(x2,2)*x3*x4 + A[6][3]*x1*pow(x2,2)*x3 + 
                    A[6][2]*x1*pow(x2,2)*pow(x4,2) + A[6][1]*x1*pow(x2,2)*x4 + A[6][0]*x1*pow(x2,2) + 
                    A[5][8]*x1*x2*pow(x3,2)*pow(x4,2) + A[5][7]*x1*x2*pow(x3,2)*x4 + A[5][6]*x1*x2*pow(x3,2) + 
                    A[5][5]*x1*x2*x3*pow(x4,2) + A[5][4]*x1*x2*x3*x4 + A[5][3]*x1*x2*x3 + 
                    A[5][2]*x1*x2*pow(x4,2) + A[5][1]*x1*x2*x4 + A[5][0]*x1*x2 + A[4][8]*x1*pow(x3,2)*pow(x4,2) + 
                    A[4][7]*x1*pow(x3,2)*x4 + A[4][6]*x1*pow(x3,2) + A[4][5]*x1*x3*pow(x4,2) + 
                    A[4][4]*x1*x3*x4 + A[4][3]*x1*x3 + A[4][2]*x1*pow(x4,2) + A[4][1]*x1*x4 + 
                    A[4][0]*x1 + A[3][8]*pow(x2,3)*pow(x3,2)*pow(x4,2) + A[3][7]*pow(x2,3)*pow(x3,2)*x4 + 
                    A[3][6]*pow(x2,3)*pow(x3,2) + A[3][5]*pow(x2,3)*x3*pow(x4,2) + A[3][4]*pow(x2,3)*x3*x4 + 
                    A[3][3]*pow(x2,3)*x3 + A[3][2]*pow(x2,3)*pow(x4,2) + A[3][1]*pow(x2,3)*x4 + 
                    A[3][0]*pow(x2,3) + A[2][8]*pow(x2,2)*pow(x3,2)*pow(x4,2) + A[2][7]*pow(x2,2)*pow(x3,2)*x4 + 
                    A[2][6]*pow(x2,2)*pow(x3,2) + A[2][5]*pow(x2,2)*x3*pow(x4,2) + A[2][4]*pow(x2,2)*x3*x4 + 
                    A[2][3]*pow(x2,2)*x3 + A[2][2]*pow(x2,2)*pow(x4,2) + A[2][1]*pow(x2,2)*x4 + 
                    A[2][0]*pow(x2,2) + A[1][8]*x2*pow(x3,2)*pow(x4,2) + A[1][7]*x2*pow(x3,2)*x4 + 
                    A[1][6]*x2*pow(x3,2) + A[1][5]*x2*x3*pow(x4,2) + A[1][4]*x2*x3*x4 + A[1][3]*x2*x3 + 
                    A[1][2]*x2*pow(x4,2) + A[1][1]*x2*x4 + A[1][0]*x2 + A[0][8]*pow(x3,2)*pow(x4,2) + 
                    A[0][7]*pow(x3,2)*x4 + A[0][6]*pow(x3,2) + A[0][5]*x3*pow(x4,2) + A[0][4]*x3*x4 + 
                    A[0][3]*x3 + A[0][2]*pow(x4,2) + A[0][1]*x4 + A[0][0];

		return Q;

}


// ---------------------------------------------------------- //
// Function to return Kxx                                     //
// ---------------------------------------------------------- //
double getKxx( double lam1, double lam2, double e1, double e2 )
{

	// Matrix of coefficients for 1st fit ( 1 >= lambda1 => 5 )
	double A1[16][9] = {
			{ 3.53349921, -0.33927902, 0.04568083, -0.69001077, 0.04583371, 0.01474088, 0.02146652, 0.01557130, -0.01172687 },
			{ 2.31580607, -0.23521969, 0.05112234, -0.47198263, 0.07578789, -0.00427490, 0.03912989, -0.01688922, -0.00166168 },
			{ 0.65917520, -0.04216079, 0.04890864, -0.11280292, -0.02395673, 0.01667266, 0.01443954, 0.01152399, -0.01209595 },
			{ -0.18328433, 0.00819682, -0.00278354, 0.02975497, -0.02879118, 0.00007761, -0.00575513, 0.01683639, -0.00315044 },
			{ 1.76187534, -0.26677872, -0.04754942, -0.32603447, -0.01183232, 0.00669258, -0.01553011, 0.02882430, 0.00148808 },
			{ 0.69360686, -0.20354461, -0.02969493, -0.18833863, 0.14223096, -0.05124579, 0.04194048, -0.06500519, 0.03107024 },
			{ -0.53510929, 0.03607487, -0.00358687, 0.14488439, -0.05066630, 0.01326849, -0.00903176, 0.01127722, -0.00319250 },
			{ 0.12262945, 0.00284663, -0.00364839, -0.02552287, 0.03384799, -0.00650111, 0.00408247, -0.01539541, 0.00405933 },
			{ -0.16823867, 0.10558993, 0.02520540, 0.09916519, -0.15170856, 0.06040923, -0.02809614, 0.06908260, -0.03436593 },
			{ 0.01757909, -0.08370524, 0.00562479, -0.11720831, 0.23999662, -0.08159807, 0.08116806, -0.11811224, 0.03994159 },
			{ 0.05734013, 0.04862090, -0.00586569, 0.04987766, -0.12130132, 0.03955825, -0.04391695, 0.06492248, -0.02113108 },
			{ -0.01913602, -0.00965323, 0.00238386, -0.00618002, 0.01012531, -0.00380656, 0.00551653, -0.00595544, 0.00202722 },
			{ 0.01763729, -0.01423756, -0.00240778, -0.01645694, 0.02971933, -0.01111025, 0.00715038, -0.01458979, 0.00623451 },
			{ -0.01456594, 0.01758799, -0.00045057, 0.02859240, -0.04929982, 0.01586450, -0.01679912, 0.02463387, -0.00812601 },
			{ 0.00180926, -0.00946254, 0.00095321, -0.01402425, 0.02510151, -0.00776468, 0.00884585, -0.01301639, 0.00409402 },
			{ 0.00056856, 0.00166635, -0.00031140, 0.00198071, -0.00305376, 0.00095165, -0.00121780, 0.00163680, -0.00051256 }
	};
	// Matrix of coefficients for 2nd fit ( 5 > lambda1 => 11)
	double A2[16][9] = {
			{ -1.48974561, 2.39918984, 0.13999264, 6.75474454, 1.71357403, -4.28828660, -3.35568575, -1.60603559, 2.60447471 },
			{ 9.75249474, -6.77867209, 0.67892328, -11.02460056, 3.71358713, 3.01298336, 4.40136417, -0.19663070, -2.29834198 },
			{ -2.57173155, 2.87961089, -0.51465249, 4.04369116, -3.22068064, 0.02916515, -1.69481966, 1.09428287, 0.20947131 },
			{ 0.28960599, -0.36093634, 0.08856048, -0.47149407, 0.52153117, -0.11098934, 0.20136852, -0.20324690, 0.03087282 },
			{ 3.21072103, -0.70735505, -0.17951325, -2.64558199, -1.62842467, 2.08643436, 1.10306958, 0.99777687, -1.16289810 },
			{ -1.80922064, 1.58536363, -0.06247788, 3.20247856, -0.02644859, -1.70365436, -1.33347217, -0.43786138, 1.07925716 },
			{ 0.71368446, -0.80923482, 0.12738127, -1.24264770, 0.75351242, 0.17355244, 0.53188556, -0.23747014, -0.14867774 },
			{ -0.08646983, 0.10929144, -0.02620629, 0.14984255, -0.15146991, 0.02407708, -0.06488511, 0.05922114, -0.00494036 },
			{ -0.21772084, 0.02514915, 0.04515452, 0.24307147, 0.31696795, -0.30815963, -0.10677617, -0.16871717, 0.16190119 },
			{ 0.19981719, -0.13642766, -0.01535334, -0.31416090, -0.12927872, 0.26393000, 0.13246821, 0.10451518, -0.15225380 },
			{ -0.07334419, 0.07651658, -0.00848401, 0.12545181, -0.04794738, -0.03870499, -0.05422481, 0.01190938, 0.02464748 },
			{ 0.00895057, -0.01102154, 0.00248850, -0.01563552, 0.01417378, -0.00126903, 0.00682213, -0.00553688, -0.00002236 },
			{ 0.00725385, 0.00108252, -0.00266593, -0.00723576, -0.01707500, 0.01422268, 0.00324541, 0.00848949, -0.00718863 },
			{ -0.00699934, 0.00328649, 0.00145872, 0.00991867, 0.00980274, -0.01242824, -0.00419691, -0.00595032, 0.00675055 },
			{ 0.00251565, -0.00231544, 0.00008942, -0.00412584, 0.00044140, 0.00210982, 0.00179340, 0.00009774, -0.00118843 },
			{ -0.00030973, 0.00036506, -0.00007529, 0.00053561, -0.00042390, -0.00000233, -0.00023482, 0.00016498, 0.00002047 }
	};
	// End matrix of coefficients

	double Kxx = 0.0;

	if ( lam2 > lam1 ) 
	{
		std::cout << "!!! Error, lam2 > lam1, this is not allowed, setting tensor to 0.0 !!!\n" ;
	}
	else if ( lam1 > 1.0 && lam1 <= 5.0 )
	{
		Kxx = eqQ( A1, lam1, lam2, e1, e2 );
	}
	else if ( lam1 > 5.0 && lam1 <= 11.0 )
	{
		Kxx = eqQ( A2, lam1, lam2, e1, e2 );
	}
	else if ( lam1 > 11.0 )
	{
		Kxx = eqQ( A2, lam1, lam2, e1, e2 );
		std::cout << "!!! Warning, outside range, max(lam1) = 11.0, code will run, but result will be garbage !!!\n";
	}
	else
	{
		std::cout << "!!! Unexpected error, setting tensor to 0.0  !!!\n";
	}

	return Kxx;

}


// ---------------------------------------------------------- //
// Function to return Kyy                                     //
// ---------------------------------------------------------- //
double getKyy( double lam1, double lam2, double e1, double e2 )
{

	// Matrix of coefficients for 1st fit ( 1 >= lambda1 => 5 )
	double A1[16][9] = {
			{ 3.21343406, -0.33659542, 0.00432060, -0.64805001, 0.05552024, 0.01886016, 0.01156243, 0.01658400, -0.00968111 },
			{ 1.71369178, -0.21289724, -0.03569803, -0.37076475, 0.06460303, 0.01663609, 0.00722673, 0.00050810, -0.00398609 },
			{ 0.02962394, 0.04228354, -0.09289504, 0.01801069, -0.12943270, 0.10852596, -0.03347601, 0.07995721, -0.04812128 },
			{ 0.07165630, -0.07582357, 0.06974173, -0.12538058, 0.10378661, -0.04787334, 0.07392890, -0.04863859, 0.01083232 },
			{ 2.90965344, -0.35639454, 0.15810431, -0.54365340, 0.07578918, -0.07816152, 0.06071389, -0.03854888, 0.02635712 },
			{ 1.11612937, -0.30274346, 0.10891500, -0.27865991, 0.26851883, -0.16181955, 0.07635301, -0.14019753, 0.07805354 },
			{ -0.59473167, 0.12432977, -0.06377630, 0.24582358, -0.19772149, 0.08754458, -0.06476847, 0.08505344, -0.03493271 },
			{ 0.03457567, 0.02731057, -0.02122705, 0.03842987, -0.00054754, -0.00713404, -0.02962920, -0.00133823, 0.00917138 },
			{ -0.14128910, 0.27505841, -0.10952918, 0.19217278, -0.40222826, 0.22289708, -0.08586242, 0.19597201, -0.10817697 },
			{ -0.28397530, -0.19681951, 0.05901221, -0.13341913, 0.43173111, -0.20732728, 0.10307656, -0.21203877, 0.10262622 },
			{ 0.19621899, 0.05459591, -0.00274879, 0.00870943, -0.13741380, 0.06397300, -0.02561692, 0.07327118, -0.03615301 },
			{ -0.01944016, -0.01493565, 0.00482537, -0.01463665, 0.01800421, -0.00534434, 0.01042739, -0.00902505, 0.00206183 },
			{ 0.00886302, -0.04060304, 0.01612877, -0.02864139, 0.07202592, -0.03812164, 0.01496801, -0.03642754, 0.01931514 },
			{ 0.02250560, 0.04153664, -0.01385725, 0.03387206, -0.09134372, 0.04351767, -0.02152035, 0.04621275, -0.02215473 },
			{ -0.01760207, -0.01429683, 0.00315500, -0.01038756, 0.03494897, -0.01590136, 0.00755333, -0.01824078, 0.00858039 },
			{ 0.00204956, 0.00237029, -0.00061419, 0.00230425, -0.00431133, 0.00163062, -0.00146527, 0.00221967, -0.00082998 }
	};
	// Matrix of coefficients for 2nd fit ( 5 > lambda1 => 11)
	double A2[16][9] = {
			{ -0.30069241, 0.61872733, 1.12491144, 6.74183022, 1.87796956, -3.72428499, -3.88722868, -0.00990843, 1.25738438 },
			{ 7.63357823, -5.64538120, -0.08819760, -10.86384308, 3.81278838, 2.83221405, 4.87647968, -1.57247544, -1.44365825 },
			{ -2.04422228, 2.40738928, -0.27093778, 3.71255427, -2.68664460, -0.21337383, -1.65525138, 1.19090837, 0.14233838 },
			{ 0.23434710, -0.31674124, 0.06924203, -0.43877422, 0.46476057, -0.08387114, 0.19445894, -0.20528128, 0.03146984 },
			{ 3.97041388, 0.12127542, -0.54958812, -2.66235383, -1.90388860, 1.97183126, 1.27190397, 0.45681412, -0.69085296 },
			{ -1.57377543, 1.05993982, 0.28967682, 3.13666179, -0.02955196, -1.67827360, -1.49520818, 0.07106828, 0.76630600 },
			{ 0.58379030, -0.62296652, 0.01457111, -1.11770748, 0.58075000, 0.26208350, 0.51636645, -0.28301260, -0.11947867 },
			{ -0.07166811, 0.09316897, -0.01755330, 0.13805646, -0.13442323, 0.01519683, -0.06248563, 0.06141448, -0.00595053 },
			{ -0.21260303, -0.07365227, 0.08864132, 0.23115799, 0.35704397, -0.29804327, -0.12591383, -0.10838086, 0.10751802 },
			{ 0.17306559, -0.06840289, -0.05762995, -0.30303064, -0.13677999, 0.26430178, 0.15127027, 0.04833916, -0.11731452 },
			{ -0.05960722, 0.05339308, 0.00569483, 0.11017051, -0.02724841, -0.04963770, -0.05234424, 0.01675163, 0.02153072 },
			{ 0.00745073, -0.00910326, 0.00139179, -0.01424652, 0.01231296, -0.00025731, 0.00654846, -0.00581814, 0.00010790 },
			{ 0.00663673, 0.00516932, -0.00444958, -0.00641906, -0.01934239, 0.01422955, 0.00387636, 0.00648243, -0.00528276 },
			{ -0.00591423, 0.00047942, 0.00311834, 0.00932401, 0.01046117, -0.01264823, -0.00487697, -0.00397876, 0.00553047 },
			{ 0.00200405, -0.00139431, -0.00047113, -0.00351108, -0.00039260, 0.00255961, 0.00171415, -0.00005549, -0.00109108 },
			{ -0.00025674, 0.00029087, -0.00003183, 0.00048162, -0.00035456, -0.00004113, -0.00022427, 0.00017505, 0.00001608 }
	};
	// End matrix of coefficients

	double Kyy = 0.0;

	if ( lam2 > lam1 ) 
	{
		std::cout << "!!! Error, lam2 > lam1, this is not allowed, setting tensor to 0.0 !!!\n" ;
	}
	else if ( lam1 > 1.0 && lam1 <= 5.0 )
	{
		Kyy = eqQ( A1, lam1, lam2, e1, e2 );
	}
	else if ( lam1 > 5.0 && lam1 <= 11.0 )
	{
		Kyy = eqQ( A2, lam1, lam2, e1, e2 );
	}
	else if ( lam1 > 11.0 )
	{
		Kyy = eqQ( A2, lam1, lam2, e1, e2 );
		std::cout << "!!! Warning, outside range, max(lam1) = 11.0, code will run, but result will be garbage !!!\n";
	}
	else
	{
		std::cout << "!!! Unexpected error, setting tensor to 0.0  !!!\n";
	}

	return Kyy;

}


// ---------------------------------------------------------- //
// Function to return Kzz                                     //
// ---------------------------------------------------------- //
double getKzz( double lam1, double lam2, double e1, double e2 )
{

	// Matrix of coefficients for 1st fit ( 1 >= lambda1 => 5 )
	double A1[16][9] = {
			{ 2.92542213, -0.29802996, -0.00881563, -0.70123283, 0.03073413, 0.03953220, 0.04460461, 0.03058325, -0.02709680 },
			{ 1.76635352, -0.19770656, -0.01275057, -0.40140460, 0.03139676, 0.02811203, 0.01306949, 0.01735222, -0.01610454 },
			{ 0.26463870, 0.04488516, -0.03944639, 0.08752084, -0.26415032, 0.13791488, -0.09779185, 0.14673611, -0.06649901 },
			{ 0.08924707, -0.07369479, 0.03892627, -0.20739522, 0.17914960, -0.06983566, 0.14638795, -0.10074677, 0.02774926 },
			{ 2.56613016, -0.35829063, 0.03544205, -0.56454294, 0.15156866, -0.08586384, 0.18451999, -0.10089526, 0.04395579 },
			{ 1.30447762, -0.33334957, 0.04637803, -0.34651423, 0.41158509, -0.20223952, 0.19078695, -0.23296969, 0.10819566 },
			{ -0.36782607, 0.10761227, -0.04383652, 0.39584731, -0.33620676, 0.11744349, -0.14105215, 0.15101045, -0.04664714 },
			{ -0.05224914, 0.02477273, -0.00922917, 0.04591220, 0.00365757, -0.00392526, -0.05344112, 0.01109288, 0.00126668 },
			{ -0.28848044, 0.25727234, -0.06433534, 0.35788603, -0.60304278, 0.27677888, -0.20477126, 0.31375843, -0.14182408 },
			{ 0.04461977, -0.23318047, 0.06502557, -0.31996426, 0.67125594, -0.27855620, 0.20909004, -0.33120061, 0.13483196 },
			{ -0.02376412, 0.08716619, -0.01526108, 0.04695769, -0.20372133, 0.08711306, -0.05426006, 0.10861499, -0.04747658 },
			{ 0.02637457, -0.01844598, 0.00396133, -0.02202470, 0.02568399, -0.00915566, 0.01998071, -0.01716534, 0.00566328 },
			{ 0.03547411, -0.04041774, 0.01165266, -0.05884045, 0.10750574, -0.04780177, 0.03487548, -0.05612355, 0.02461413 },
			{ -0.03000309, 0.04933026, -0.01410141, 0.07544975, -0.14127033, 0.05756733, -0.04630822, 0.07145824, -0.02853169 },
			{ 0.01313448, -0.02019405, 0.00479889, -0.02466237, 0.05367367, -0.02144431, 0.01651619, -0.02787633, 0.01114830 },
			{ -0.00362767, 0.00317269, -0.00071102, 0.00416394, -0.00654840, 0.00240691, -0.00298618, 0.00373280, -0.00134979 }
	};
	// Matrix of coefficients for 2nd fit ( 5 > lambda1 => 11)
	double A2[16][9] = {
			{ -3.13999427, 2.01624666, 1.13910190, 10.85675962, 1.63088000, -6.28946653, -5.87612666, -1.22925174, 3.62633426 },
			{ 10.83593288, -6.97275894, -0.03679404, -15.42375202, 4.42430075, 5.03565979, 7.21109558, -0.54230376, -3.70961805 },
			{ -2.94431606, 3.06026006, -0.41731529, 5.39680149, -4.03934264, -0.22803255, -2.57743135, 1.63525635, 0.40397278 },
			{ 0.35153045, -0.41706709, 0.09786287, -0.63898222, 0.70971896, -0.14344437, 0.30820109, -0.31128136, 0.04193618 },
			{ 4.18371278, -0.33487761, -0.66736835, -3.97313084, -2.25277452, 3.14447848, 1.97599355, 1.09588198, -1.65737151 },
			{ -1.77488255, 1.34811313, 0.31458148, 4.57059004, 0.39031836, -2.79259814, -2.15710220, -0.59791888, 1.72716030 },
			{ 0.75629376, -0.78960887, 0.05120697, -1.62471838, 0.83713523, 0.37103226, 0.78178919, -0.34251596, -0.25787775 },
			{ -0.10055358, 0.12197252, -0.02611716, 0.19985816, -0.20070945, 0.02715724, -0.09685770, 0.09021087, -0.00577974 },
			{ -0.24657035, -0.04554159, 0.11344387, 0.36997479, 0.44403394, -0.45991010, -0.19604860, -0.19981509, 0.22844607 },
			{ 0.20157972, -0.08606830, -0.07118868, -0.43472476, -0.24312191, 0.42087689, 0.20960874, 0.15019596, -0.23872852 },
			{ -0.07448166, 0.06669075, 0.00394846, 0.15782450, -0.03750438, -0.07058072, -0.07693182, 0.01551604, 0.04062898 },
			{ 0.01008993, -0.01182522, 0.00218026, -0.02038577, 0.01817550, -0.00089445, 0.00994486, -0.00839688, -0.00019132 },
			{ 0.00795087, 0.00472771, -0.00572235, -0.01097841, -0.02425891, 0.02111570, 0.00618197, 0.01060092, -0.01012316 },
			{ -0.00688526, 0.00049632, 0.00398680, 0.01321655, 0.01651346, -0.01944953, -0.00653985, -0.00867097, 0.01042679 },
			{ 0.00244194, -0.00168732, -0.00049572, -0.00495567, -0.00064228, 0.00360883, 0.00245590, 0.00025385, -0.00190144 },
			{ -0.00033939, 0.00037405, -0.00005446, 0.00068116, -0.00051954, -0.00003926, -0.00033483, 0.00024914, 0.00003516 }
	};
	// End matrix of coefficients

	double Kzz = 0.0;

	if ( lam2 > lam1 ) 
	{
		std::cout << "!!! Error, lam2 > lam1, this is not allowed, setting tensor to 0.0 !!!\n" ;
	}
	else if ( lam1 > 1.0 && lam1 <= 5.0 )
	{
		Kzz = eqQ( A1, lam1, lam2, e1, e2 );
	}
	else if ( lam1 > 5.0 && lam1 <= 11.0 )
	{
		Kzz = eqQ( A2, lam1, lam2, e1, e2 );
	}
	else if ( lam1 > 11.0 )
	{
		Kzz = eqQ( A2, lam1, lam2, e1, e2 );
		std::cout << "!!! Warning, outside range, max(lam1) = 11.0, code will run, but result will be garbage !!!\n";
	}
	else
	{
		std::cout << "!!! Unexpected error, setting tensor to 0.0  !!!\n";
	}

	return Kzz;

}


// ---------------------------------------------------------- //
// Function to return Omegaxx                                 //
// ---------------------------------------------------------- //
double getOmegaxx( double lam1, double lam2, double e1, double e2 )
{

	// Matrix of coefficients for 1st fit ( 1 >= lambda1 => 5 )
	double A1[16][9] = {
			{ 1.53016569, -0.08024478, 0.00483809, -1.70463422, 1.17170863, -0.32094814, 0.49985876, -0.42373874, 0.09727264 },
			{ 2.85616138, -1.65220467, 0.29308695, -3.82461779, 3.88151882, -1.01155109, 1.52686428, -1.92006373, 0.55208580 },
			{ 2.44549944, -0.58816885, -0.16530381, -0.40621054, -1.18473318, 0.73603600, -0.14200677, 0.39300891, -0.19110142 },
			{ 2.48255280, -0.74149561, 0.33758503, -1.51820288, -0.40100281, 0.05556573, 0.14883243, 0.87355233, -0.30460844 },
			{ 3.29890904, 0.78437755, -0.21344882, 0.58070018, -4.58175097, 1.30769543, -1.29623798, 2.82821533, -0.86066091 },
			{ 5.80493965, -3.47405724, 0.81650091, -6.74521681, 6.23460876, -1.92138502, 2.47343139, -2.73995827, 0.87418401 },
			{ 2.37879885, 0.06264460, -0.48666889, 2.12098454, -4.34801202, 1.67901713, -1.30863024, 1.73764113, -0.56136546 },
			{ -0.40229749, -0.31328440, 0.05269797, -0.12108983, 1.87345605, -0.63954578, 0.47769119, -1.19189018, 0.38328067 },
			{ -2.34690770, 3.49492289, -1.12288480, 6.56574234, -9.14240172, 3.10333300, -3.08381081, 4.03958923, -1.32081661 },
			{ 3.84724078, -5.55016465, 1.67736075, -11.70246849, 15.87035706, -5.05007061, 5.61636307, -7.51268287, 2.34924364 },
			{ -1.14469974, 2.01965523, -0.56107490, 4.59705878, -6.48382574, 1.95254038, -2.23543165, 3.36496047, -1.05352717 },
			{ 0.27618664, -0.24577634, 0.07329422, -0.57468903, 0.48632468, -0.12814370, 0.19106254, -0.21589692, 0.06799542 },
			{ 0.56027723, -0.80353376, 0.25654614, -1.48437392, 2.07627994, -0.69064685, 0.71080636, -0.94880373, 0.30782967 },
			{ -0.93288308, 1.31987207, -0.40848522, 2.57880151, -3.55750145, 1.14425471, -1.24702888, 1.68006269, -0.53196732 },
			{ 0.35468274, -0.55381553, 0.16600086, -1.10825559, 1.58673386, -0.49824781, 0.54330871, -0.78682806, 0.24918358 },
			{ -0.05521608, 0.07260597, -0.02186776, 0.14290983, -0.18383181, 0.05615433, -0.06344592, 0.08989053, -0.02878671 }
	};
	// Matrix of coefficients for 2nd fit ( 5 > lambda1 => 11)
	double A2[16][9] = {
			{ -273.22652726, 85.28440526, 7.82301770, 393.15730494, -62.92479343, -91.68460654, -192.89386195, 78.95377251, 21.80445785 },
			{ 368.89936952, -128.80286091, -11.80827666, -560.28316211, 135.19660350, 119.51950717, 289.87178198, -151.84877857, -17.26388377 },
			{ -158.11839609, 68.97401108, -3.40258184, 263.20909393, -118.14308664, -18.89625507, -144.50522351, 102.93536784, -11.41558411 },
			{ 21.20113429, -11.28119831, 1.93514128, -34.14065947, 19.44266335, -0.67399515, 18.98437102, -13.98743437, 2.15584948 },
			{ 93.42071499, -20.29507734, -6.43106175, -115.37396475, -6.06608351, 41.68392793, 52.91168983, -12.87061618, -11.89382637 },
			{ -111.70989906, 28.36765904, 9.73877807, 151.40776968, -4.37177064, -55.19301498, -76.66692565, 30.93995253, 11.91933964 },
			{ 56.23796990, -21.32646779, -0.36081897, -79.11973946, 27.41374733, 10.80106023, 42.35547802, -28.43793012, 2.16456070 },
			{ -6.50886302, 3.26983613, -0.47242385, 10.44051157, -5.36048516, -0.15773226, -5.73760006, 4.07655725, -0.56640320 },
			{ -9.34105489, 1.21896639, 1.13954495, 10.38455265, 3.38301402, -5.61404867, -4.44134569, 0.04820286, 1.73068022 },
			{ 11.81641721, -1.77252734, -1.68349883, -13.81814710, -3.28512149, 7.46762720, 6.48241640, -1.49000727, -1.86435808 },
			{ -5.46069874, 1.64256213, 0.26377744, 7.62304161, -1.76773145, -1.60780052, -3.98555007, 2.52596355, -0.08994086 },
			{ 0.69534534, -0.31951972, 0.03583187, -1.04873868, 0.47513602, 0.05377754, 0.56817453, -0.38890272, 0.04793022 },
			{ 0.32439279, -0.01838849, -0.05296532, -0.31584357, -0.19120940, 0.22832103, 0.12121846, 0.03289231, -0.07218278 },
			{ -0.40219727, 0.03021795, 0.07565262, 0.40811015, 0.20632903, -0.29914621, -0.17547101, 0.00918589, 0.07772956 },
			{ 0.19027516, -0.04913667, -0.01377455, -0.24701551, 0.03998537, 0.06458933, 0.12529354, -0.07917902, 0.00159054 },
			{ -0.02457297, 0.01070409, -0.00096863, 0.03527039, -0.01497953, -0.00245620, -0.01877465, 0.01281284, -0.00156114 }
	};
	// End matrix of coefficients

	double Omegaxx = 0.0;

	if ( lam2 > lam1 ) 
	{
		std::cout << "!!! Error, lam2 > lam1, this is not allowed, setting tensor to 0.0 !!!\n" ;
	}
	else if ( lam1 > 1.0 && lam1 <= 5.0 )
	{
		Omegaxx = eqQ( A1, lam1, lam2, e1, e2 );
	}
	else if ( lam1 > 5.0 && lam1 <= 11.0 )
	{
		Omegaxx = eqQ( A2, lam1, lam2, e1, e2 );
	}
	else if ( lam1 > 11.0 )
	{
		Omegaxx = eqQ( A2, lam1, lam2, e1, e2 );
		std::cout << "!!! Warning, outside range, max(lam1) = 11.0, code will run, but result will be garbage !!!\n";
	}
	else
	{
		std::cout << "!!! Unexpected error, setting tensor to 0.0  !!!\n";
	}

	return Omegaxx;

}


// ---------------------------------------------------------- //
// Function to return Omegayy                                 //
// ---------------------------------------------------------- //
double getOmegayy( double lam1, double lam2, double e1, double e2 )
{

	// Matrix of coefficients for 1st fit ( 1 >= lambda1 => 5 )
	double A1[16][9] = {
			{ 1.71367123, 0.67299334, -0.22183127, 0.65639019, -1.34643397, 0.24603625, -0.65398936, 0.70285300, -0.13959444 },
			{ 1.78291353, 0.53352226, -0.35502909, 1.99007520, -2.87763247, 0.90271062, -1.75352783, 1.70823185, -0.45437873 },
			{ -0.25011600, 3.43837848, -1.61668711, 6.67526321, -12.85518598, 5.41519683, -4.65194035, 7.23586895, -2.85755639 },
			{ 2.69329092, -3.29975037, 1.31707336, -10.02785187, 11.44245638, -3.76319786, 6.48860329, -6.68589094, 1.94033618 },
			{ 4.16518502, -3.73695453, 1.38777979, -11.02336197, 11.39592813, -3.93656159, 5.79597347, -6.13061743, 2.02113465 },
			{ 5.08720635, -5.96842796, 2.07195044, -10.43322795, 15.77496360, -6.32705848, 5.18216959, -8.30111668, 3.38278958 },
			{ -1.68571173, 3.71774945, -1.73516190, 8.15516745, -14.44589543, 5.88807948, -5.92912619, 8.41021077, -3.09255835 },
			{ -1.37230663, 0.68394989, -0.12344520, 3.41427130, -1.35051131, -0.16833326, -2.02232661, 0.89149458, 0.09835340 },
			{ 0.76738554, 5.16128931, -2.53119838, 8.96084409, -20.61388714, 8.97172770, -6.36830590, 11.62751822, -4.84785452 },
			{ 7.68234560, -8.83049315, 3.06339441, -12.23316738, 22.93954635, -9.70455423, 7.00353210, -12.50219641, 5.19149619 },
			{ -1.08404216, 2.18719297, -0.81604335, 2.54920262, -6.20504520, 2.73614492, -0.91690927, 3.08055824, -1.46726840 },
			{ 0.50514264, -0.47094594, 0.13187698, -1.11436511, 1.05167355, -0.26383467, 0.56520885, -0.55924686, 0.13993911 },
			{ 1.15753550, -1.03454947, 0.46464184, -1.78933698, 3.39185261, -1.46230868, 1.09186239, -1.92549654, 0.78964550 },
			{ -0.34514867, 1.12574219, -0.52146527, 2.23532704, -4.51452478, 1.89563455, -1.33908001, 2.51937982, -1.03085789 },
			{ 0.19989367, -0.51937207, 0.21328651, -0.78353001, 1.75394323, -0.74048322, 0.40211839, -0.93170996, 0.39965690 },
			{ -0.06137405, 0.08695255, -0.02964141, 0.15935320, -0.23662731, 0.08304820, -0.08015768, 0.12441784, -0.04438513 }
	};
	// Matrix of coefficients for 2nd fit ( 5 > lambda1 => 11)
	double A2[16][9] = {
			{ -1021.02702659, 796.83387720, -72.69358736, 2116.68071800, -1585.83720023, 25.30708141, -1172.03961113, 1159.43845116, -213.76047361 },
			{ 1413.95562260, -1564.31340311, 335.25632068, -2900.85065309, 2939.23428913, -424.15423744, 1497.98317741, -1654.88046216, 306.26763810 },
			{ -462.55579067, 581.04017705, -146.74553538, 952.49534242, -1125.77390879, 234.66852008, -481.64564094, 604.91671944, -138.63977976 },
			{ 51.09024982, -68.35094135, 19.75735644, -104.48050518, 137.45375773, -36.96919712, 51.77701208, -69.83086764, 19.09032042 },
			{ 343.57901975, -222.50702106, -5.13718439, -705.94864976, 433.78861147, 60.85909251, 402.19050710, -371.32900876, 53.70867010 },
			{ -482.42160705, 504.46699749, -93.91590600, 979.88536526, -929.65782812, 89.96671179, -515.85254177, 551.07074250, -88.53224044 },
			{ 158.03991452, -190.87984217, 45.13925744, -322.05580096, 366.14595521, -66.90732944, 164.68513047, -203.09814115, 43.58526467 },
			{ -17.45573934, 22.86908731, -6.43489887, 35.56137631, -45.96067607, 11.84830675, -17.73086827, 23.75260240, -6.33227341 },
			{ -32.93622054, 16.94242686, 4.89837301, 72.66774813, -33.21742400, -15.84209167, -43.83565000, 37.48560079, -3.35999564 },
			{ 59.89298182, -55.87596329, 8.34839990, -109.62780849, 95.74733993, -3.76365043, 58.51369427, -60.03841559, 8.09058700 },
			{ -17.91793483, 20.67889210, -4.51561985, 35.66972185, -38.97914651, 6.06936486, -18.44433664, 22.33642604, -4.48215453 },
			{ 1.97393859, -2.52372683, 0.68973206, -3.96831882, 5.04583987, -1.24820686, 1.98989848, -2.64877496, 0.69037836 },
			{ 2.01148889, -0.40050989, -0.34033742, -2.62557453, 0.50196503, 0.98030130, 1.59754169, -1.15398077, -0.01449645 },
			{ -1.93877220, 1.73021295, -0.17272050, 3.96383791, -3.09478512, -0.13663647, -2.15672573, 2.10742491, -0.21466001 },
			{ 0.64945242, -0.71751126, 0.14161098, -1.28962986, 1.34505308, -0.16683209, 0.67518043, -0.80192587, 0.14914887 },
			{ -0.07266799, 0.09088722, -0.02410065, 0.14511157, -0.18162081, 0.04309150, -0.07319298, 0.09692860, -0.02475812 }
	};
	// End matrix of coefficients

	double Omegayy = 0.0;

	if ( lam2 > lam1 ) 
	{
		std::cout << "!!! Error, lam2 > lam1, this is not allowed, setting tensor to 0.0 !!!\n" ;
	}
	else if ( lam1 > 1.0 && lam1 <= 5.0 )
	{
		Omegayy = eqQ( A1, lam1, lam2, e1, e2 );
	}
	else if ( lam1 > 5.0 && lam1 <= 11.0 )
	{
		Omegayy = eqQ( A2, lam1, lam2, e1, e2 );
	}
	else if ( lam1 > 11.0 )
	{
		Omegayy = eqQ( A2, lam1, lam2, e1, e2 );
		std::cout << "!!! Warning, outside range, max(lam1) = 11.0, code will run, but result will be garbage !!!\n";
	}
	else
	{
		std::cout << "!!! Unexpected error, setting tensor to 0.0  !!!\n";
	}

	return Omegayy;

}


// ---------------------------------------------------------- //
// Function to return Omegazz                                 //
// ---------------------------------------------------------- //
double getOmegazz( double lam1, double lam2, double e1, double e2 )
{

	// Matrix of coefficients for 1st fit ( 1 >= lambda1 => 5 )
	double A1[16][9] = {
			{ -1.16998243, 1.43799604, -0.40350140, 1.01859981, -0.86228866, 0.17649792, -0.33899255, 0.27909986, -0.06834783 },
			{ 0.75662336, 1.34277945, -0.90770337, 0.73639906, -1.94254842, 1.02731897, -0.66654127, 0.78481038, -0.35328262 },
			{ 1.33422238, 5.12228456, -2.81662979, 4.24741552, -12.26650216, 5.86302254, -2.93981381, 5.79653303, -2.63633102 },
			{ 5.05458507, -5.97895087, 3.03362933, -7.41083583, 9.35819894, -3.90966040, 3.59328500, -3.92310466, 1.39670152 },
			{ 2.76091740, -7.22716574, 3.32391026, -5.35326726, 10.15622293, -4.69089516, 2.65536103, -4.10577924, 1.85381891 },
			{ 5.09093014, -9.85348952, 3.60836041, -7.99249413, 16.34835969, -6.99570840, 3.64586279, -7.30440512, 3.24896616 },
			{ 0.27099824, 4.33033120, -2.86087157, 6.09227220, -12.85381118, 5.93388661, -3.87400950, 6.19451783, -2.56524343 },
			{ -1.58583926, 1.38139023, -0.66133114, 1.87920170, -0.43699961, -0.11202950, -0.75685101, -0.10110421, 0.24581944 },
			{ 1.06681046, 9.58084558, -4.37211092, 7.63965016, -21.89883602, 9.88973303, -4.92734285, 10.42309442, -4.65486559 },
			{ 7.16102110, -11.49826064, 4.47502363, -12.19644574, 23.53327100, -10.02591416, 5.88152295, -11.07998024, 4.71910238 },
			{ -0.89208042, 1.79602359, -0.53935408, 2.57007952, -5.66965165, 2.32763967, -1.11637295, 2.87458860, -1.26531953 },
			{ 0.44282742, -0.48908918, 0.18335897, -0.70054592, 0.68980564, -0.19031070, 0.29357299, -0.29027502, 0.07285515 },
			{ 1.62331396, -1.72881358, 0.76925990, -2.03903865, 3.81348026, -1.65866309, 0.98396552, -1.84138474, 0.78575933 },
			{ -0.86991738, 1.94259081, -0.82988873, 2.45937681, -4.87353433, 2.02437669, -1.23104081, 2.34798557, -0.97024404 },
			{ 0.26673914, -0.60119705, 0.22965829, -0.82622619, 1.70509502, -0.69206578, 0.40255581, -0.84327341, 0.34968650 },
			{ -0.05672598, 0.08750770, -0.03208551, 0.12489321, -0.19339438, 0.06889022, -0.05721533, 0.09187236, -0.03322002 }
	};
	// Matrix of coefficients for 2nd fit ( 5 > lambda1 => 11)
	double A2[16][9] = {
			{ -741.23858288, 473.00116603, -40.33360244, 1528.15431186, -1093.47086233, 18.67563076, -860.95184922, 971.23308639, -258.45577600 },
			{ 1002.16816646, -1012.63635199, 215.88376330, -2059.47990445, 2016.25752120, -264.62775513, 1079.75322029, -1277.56725404, 289.38776548 },
			{ -327.45351227, 388.55577442, -98.26143348, 674.22879443, -770.42490973, 150.20014277, -346.28415255, 448.42533172, -112.39227943 },
			{ 38.74343840, -49.61283910, 15.26114742, -75.28626604, 98.74748990, -27.09857804, 37.43581002, -52.04358795, 15.27111514 },
			{ 240.51875621, -102.94379100, -19.00587719, -495.68449723, 250.09620476, 71.39817049, 290.43499203, -299.71745390, 65.52222194 },
			{ -335.99484288, 296.87351884, -46.13975900, 686.25191100, -589.77888813, 23.31587702, -368.17484743, 411.82276955, -78.18644232 },
			{ 114.77498210, -122.87430874, 26.89954907, -226.72944434, 239.30606245, -34.82385398, 117.46026383, -146.97697796, 33.34522694 },
			{ -12.80901258, 16.11747422, -4.72060585, 25.38572331, -32.35520440, 8.25060828, -12.70971899, 17.47992293, -4.94180318 },
			{ -18.88564459, 2.77028011, 6.95584822, 47.86538148, -10.63672113, -18.50719346, -30.85834466, 28.38183645, -3.96661217 },
			{ 40.29367134, -30.32369787, 2.40735199, -75.31442824, 54.24960109, 5.54419122, 40.98637976, -42.61680290, 6.01415866 },
			{ -12.52060465, 12.27417290, -2.19711095, 24.57697816, -23.60312853, 1.87174751, -12.92036173, 15.49967102, -3.05611375 },
			{ 1.43134809, -1.72196517, 0.47793081, -2.79763711, 3.43858471, -0.80152666, 1.40937572, -1.90535170, 0.51444134 },
			{ 1.60005980, 0.24514401, -0.46319056, -1.80027605, -0.41188392, 1.15873863, 1.11030827, -0.78852448, -0.02280376 },
			{ -1.31653751, 0.76997837, 0.07886462, 2.64939721, -1.45905554, -0.55360504, -1.47639081, 1.41259445, -0.10509957 },
			{ 0.44668243, -0.38981738, 0.04678257, -0.87129704, 0.74677829, 0.00837438, 0.46500489, -0.53424697, 0.08701316 },
			{ -0.05219077, 0.05993313, -0.01559740, 0.10120607, -0.11991352, 0.02511122, -0.05128495, 0.06827358, -0.01755238 }
	};
	// End matrix of coefficients

	double Omegazz = 0.0;

	if ( lam2 > lam1 ) 
	{
		std::cout << "!!! Error, lam2 > lam1, this is not allowed, setting tensor to 0.0 !!!\n" ;
	}
	else if ( lam1 > 1.0 && lam1 <= 5.0 )
	{
		Omegazz = eqQ( A1, lam1, lam2, e1, e2 );
	}
	else if ( lam1 > 5.0 && lam1 <= 11.0 )
	{
		Omegazz = eqQ( A2, lam1, lam2, e1, e2 );
	}
	else if ( lam1 > 11.0 )
	{
		Omegazz = eqQ( A2, lam1, lam2, e1, e2 );
		std::cout << "!!! Warning, outside range, max(lam1) = 11.0, code will run, but result will be garbage !!!\n";
	}
	else
	{
		std::cout << "!!! Unexpected error, setting tensor to 0.0  !!!\n";
	}

	return Omegazz;

}


// ---------------------------------------------------------- //
// Function to return PIxx                                    //
// ---------------------------------------------------------- //
double getPIxx( double lam1, double lam2, double e1, double e2 )
{

	// Matrix of coefficients for 1st fit ( 1 >= lambda1 => 5 )
	double A1[16][9] = {
			{ -3.74754159, 1.30157784, -0.22667532, 1.97465332, -0.98198951, 0.28350374, -0.48021733, 0.45092129, -0.18187191 },
			{ -0.12919573, -0.69950306, 0.34039775, -0.84031202, 1.83902271, -0.68275723, 0.52765254, -1.00004936, 0.33569302 },
			{ 2.16581799, -0.16985534, -0.02868425, 0.84365805, -2.15880252, 0.64539921, -0.72261610, 0.81601407, -0.17319906 },
			{ 1.61778941, -0.46232185, -0.01358263, -1.08604915, -0.15981678, 0.31454292, 0.15938751, 0.68337287, -0.37273740 },
			{ -4.29084857, 1.65630828, -0.66691353, 3.81794133, -3.22320358, 1.16406615, -1.28637420, 1.76640554, -0.63418310 },
			{ 1.54249356, -3.18297899, 0.92617951, -3.90100835, 6.61616258, -2.12644356, 2.14300389, -3.04866065, 0.95784955 },
			{ 2.46463409, -0.23769027, -0.16208625, 2.20771595, -3.39614809, 1.00498083, -1.22842483, 1.17161864, -0.23186281 },
			{ 0.36220499, -0.60395572, 0.24068938, -0.64541859, 1.58993421, -0.64114777, 0.50511708, -0.93149426, 0.33293200 },
			{ -2.70230286, 3.72772236, -1.27413514, 6.52605269, -9.06839086, 2.94027752, -3.14749031, 3.90461406, -1.15583520 },
			{ 3.58650060, -5.48997798, 1.96673682, -10.01292578, 14.16775838, -4.61415678, 4.89305237, -6.43632067, 1.95396015 },
			{ -0.95809547, 2.16105982, -0.86887069, 3.92633667, -6.10261436, 2.07055888, -2.00474366, 3.09605874, -1.02229287 },
			{ 0.05985795, -0.17335109, 0.06459172, -0.36085099, 0.47974592, -0.14128672, 0.15425225, -0.23635122, 0.07657785 },
			{ 0.54743095, -0.77176773, 0.25047250, -1.38205687, 1.91053723, -0.60417436, 0.67952099, -0.86004141, 0.25642810 },
			{ -0.82479987, 1.23634681, -0.41672582, 2.21950449, -3.13138113, 1.00475756, -1.09597313, 1.44662404, -0.44222386 },
			{ 0.31237843, -0.54640632, 0.19736748, -0.96418855, 1.44147722, -0.47749727, 0.48506682, -0.70325142, 0.22649759 },
			{ -0.03462175, 0.06468570, -0.02321579, 0.11454850, -0.16924080, 0.05511464, -0.05570314, 0.08406436, -0.02763832 }
	};
	// Matrix of coefficients for 2nd fit ( 5 > lambda1 => 11)
	double A2[16][9] = {
			{ -166.02879098, 198.29042693, -85.23529853, 365.57724742, -559.73224134, 234.55903189, -244.54785666, 406.50011047, -166.17367590 },
			{ 250.38138355, -234.69292942, 87.13684758, -515.36675607, 634.40466052, -226.25334826, 333.20893337, -475.02910372, 176.71722648 },
			{ -109.32134967, 85.56975729, -26.54996673, 219.61798712, -234.50538094, 70.96853484, -144.27173585, 183.62793975, -62.96186457 },
			{ 15.16285349, -10.33688504, 2.73037265, -26.70546488, 24.29394072, -5.84216762, 17.52237673, -18.72578774, 5.49899512 },
			{ 49.07189542, -68.82661314, 30.87291561, -109.44073472, 191.65436145, -85.32787633, 73.77317998, -138.15740076, 59.70282234 },
			{ -82.33367838, 81.44333119, -32.45359619, 155.36467842, -212.72734583, 83.70218256, -98.34898521, 157.74542361, -63.61040174 },
			{ 41.41391577, -31.73045577, 10.17542030, -67.96254476, 78.14437850, -26.42770377, 43.56834400, -60.68337177, 22.63292348 },
			{ -4.56093768, 3.28848641, -0.93842271, 8.13541991, -7.86624573, 2.12930019, -5.30853977, 6.05534159, -1.93831568 },
			{ -6.05922587, 8.64006627, -4.04891699, 11.77806464, -22.85909585, 10.76684113, -7.52734433, 15.86127264, -7.22395910 },
			{ 9.19440902, -10.09506642, 4.35845695, -16.03728390, 25.04710141, -10.82511393, 9.69437315, -17.77048275, 7.73122959 },
			{ -4.06855034, 3.53372315, -1.31484446, 6.96492911, -8.94759531, 3.39634592, -4.35553869, 6.74020780, -2.72321442 },
			{ 0.49753590, -0.37741540, 0.11877787, -0.83389349, 0.87315730, -0.26915771, 0.53605637, -0.65701649, 0.22880965 },
			{ 0.22540816, -0.35338498, 0.17028289, -0.42478414, 0.91518865, -0.44644951, 0.26205417, -0.61369103, 0.28970121 },
			{ -0.33906693, 0.41588841, -0.18947863, 0.56524794, -1.00503629, 0.46346051, -0.32613566, 0.68064309, -0.31323644 },
			{ 0.14902580, -0.14304063, 0.05769042, -0.24438403, 0.35444604, -0.14708548, 0.14766331, -0.25484496, 0.10977315 },
			{ -0.01805754, 0.01477083, -0.00509328, 0.02897564, -0.03362028, 0.01166366, -0.01820853, 0.02426564, -0.00911932 }
	};
	// End matrix of coefficients

	double PIxx = 0.0;

	if ( lam2 > lam1 ) 
	{
		std::cout << "!!! Error, lam2 > lam1, this is not allowed, setting tensor to 0.0 !!!\n" ;
	}
	else if ( lam1 > 1.0 && lam1 <= 5.0 )
	{
		PIxx = eqQ( A1, lam1, lam2, e1, e2 );
	}
	else if ( lam1 > 5.0 && lam1 <= 11.0 )
	{
		PIxx = eqQ( A2, lam1, lam2, e1, e2 );
	}
	else if ( lam1 > 11.0 )
	{
		PIxx = eqQ( A2, lam1, lam2, e1, e2 );
		std::cout << "!!! Warning, outside range, max(lam1) = 11.0, code will run, but result will be garbage !!!\n";
	}
	else
	{
		std::cout << "!!! Unexpected error, setting tensor to 0.0  !!!\n";
	}

	return PIxx;

}


// ---------------------------------------------------------- //
// Function to return PIyy                                   //
// ---------------------------------------------------------- //
double getPIyy( double lam1, double lam2, double e1, double e2 )
{

	// Matrix of coefficients for 1st fit ( 1 >= lambda1 => 5 )
	double A1[16][9] = {
			{ 4.27735978, -2.14670018, 0.65110896, -4.00008818, 2.85703023, -0.69448394, 1.38930788, -1.16262995, 0.25098111 },
			{ 3.09762747, -2.32087901, 0.93258094, -5.15338303, 4.98929377, -1.51516736, 2.56892379, -2.39118724, 0.60604300 },
			{ 3.10043239, -5.41316437, 2.42528081, -9.07723922, 15.34375818, -6.31143981, 5.40629538, -8.03303060, 3.08525469 },
			{ -2.93985581, 5.04786177, -2.08843944, 10.47361186, -13.84110556, 4.68554297, -6.70507019, 7.38068017, -2.14587931 },
			{ -0.15957454, 4.87161308, -2.34187609, 8.42886289, -13.58672522, 4.93032176, -5.61908556, 6.98624260, -2.23483472 },
			{ -2.08493574, 6.49426647, -2.80228848, 8.05999620, -16.84588516, 7.11363455, -4.88092185, 8.72811225, -3.57319794 },
			{ 2.88023206, -5.30368054, 2.30275990, -9.86658142, 16.31962525, -6.58854681, 6.37969089, -8.88421395, 3.26308417 },
			{ 0.74776271, -1.09013109, 0.37291803, -2.81139823, 2.00298929, -0.11376009, 1.90408200, -1.08228649, -0.05123553 },
			{ -0.49748826, -6.75006735, 3.41964608, -9.98880155, 22.99178733, -10.03944845, 6.91499698, -12.40033798, 5.12868450 },
			{ -7.65034850, 9.78241078, -3.67199085, 12.16032575, -23.85016497, 10.46224334, -6.94395209, 12.64054700, -5.40197804 },
			{ 0.45692338, -1.77294885, 0.79010277, -1.76811839, 5.47753227, -2.65947871, 0.69153089, -2.79836193, 1.43985147 },
			{ -0.24107724, 0.46329674, -0.17115714, 0.82701306, -1.02858694, 0.29365538, -0.49036347, 0.53702916, -0.13785715 },
			{ -1.24556791, 1.30377452, -0.60806686, 1.99230786, -3.77918629, 1.64272743, -1.18339095, 2.04819927, -0.84030852 },
			{ 0.40444122, -1.38603755, 0.67034680, -2.34476913, 4.82561051, -2.09122400, 1.37836781, -2.59870665, 1.08933379 },
			{ -0.15895351, 0.52726122, -0.24028192, 0.73596168, -1.72894024, 0.76950996, -0.38800602, 0.91155224, -0.40727196 },
			{ 0.03672108, -0.08442918, 0.03413125, -0.13127084, 0.22755738, -0.08610270, 0.07217959, -0.11887781, 0.04416386 }
	};
	// Matrix of coefficients for 2nd fit ( 5 > lambda1 => 11)
	double A2[16][9] = {
			{ 735.44883395, -331.29141611, -87.56543104, -1589.73708260, 684.59220890, 299.25046946, 961.01365013, -787.57324942, 77.29533478 },
			{ -1005.74732168, 911.55993111, -119.30457911, 2151.62635417, -1679.79048363, -16.52394929, -1198.92393773, 1137.34395473, -120.12025220 },
			{ 323.87545720, -358.30629372, 72.18317169, -690.07887656, 697.03036044, -85.75843979, 375.62327361, -429.97761742, 76.91196769 },
			{ -37.11604150, 46.80967890, -12.44598411, 77.91203492, -95.85383624, 22.52469990, -40.97760623, 52.84727787, -13.15689289 },
			{ -238.39100528, 61.48311201, 59.88111157, 519.63086562, -125.71340094, -170.31047118, -328.73194515, 245.17657813, -8.10425799 },
			{ 345.98942805, -279.58034896, 19.96642583, -723.57506162, 496.07307253, 60.24553046, 412.68175292, -373.10651273, 25.24741355 },
			{ -109.48971054, 113.72410940, -19.56831880, 230.03695483, -217.98734669, 16.05537655, -127.46172286, 142.73023081, -22.55695230 },
			{ 12.57871353, -15.43021181, 3.93239692, -26.25978131, 31.61135709, -6.91967324, 13.94215842, -17.89773243, 4.31130472 },
			{ 21.42350556, 0.94384336, -10.89646405, -52.22561283, -0.45980758, 27.58874165, 35.80460528, -23.83472426, -1.46710395 },
			{ -43.94478793, 30.44877979, -0.17418097, 79.94997776, -47.02885237, -12.75016365, -46.63168878, 40.11585771, -1.15674569 },
			{ 12.32894582, -11.94809108, 1.66440112, -25.09700635, 22.27519786, -0.42693698, 14.17207687, -15.54543318, 2.15591749 },
			{ -1.41468660, 1.68254473, -0.40987168, 2.90115890, -3.42693389, 0.69922806, -1.55503286, 1.98899621, -0.46576808 },
			{ -1.58737177, -0.24623833, 0.55314843, 1.88477920, 0.68935504, -1.38505651, -1.31017202, 0.67865168, 0.17721970 },
			{ 1.33970996, -0.79440867, -0.12191937, -2.85791210, 1.31931343, 0.72522803, 1.71651783, -1.38616675, -0.03061678 },
			{ -0.43979463, 0.39523720, -0.03799369, 0.89415380, -0.73206115, -0.03661889, -0.51574493, 0.55373557, -0.06573473 },
			{ 0.05168932, -0.05976332, 0.01386578, -0.10510020, 0.12194099, -0.02313056, 0.05689694, -0.07266266, 0.01662145 }
	};
	// End matrix of coefficients

	double PIyy = 0.0;

	if ( lam2 > lam1 ) 
	{
		std::cout << "!!! Error, lam2 > lam1, this is not allowed, setting tensor to 0.0 !!!\n" ;
	}
	else if ( lam1 > 1.0 && lam1 <= 5.0 )
	{
		PIyy = eqQ( A1, lam1, lam2, e1, e2 );
	}
	else if ( lam1 > 5.0 && lam1 <= 11.0 )
	{
		PIyy = eqQ( A2, lam1, lam2, e1, e2 );
	}
	else if ( lam1 > 11.0 )
	{
		PIyy = eqQ( A2, lam1, lam2, e1, e2 );
		std::cout << "!!! Warning, outside range, max(lam1) = 11.0, code will run, but result will be garbage !!!\n";
	}
	else
	{
		std::cout << "!!! Unexpected error, setting tensor to 0.0  !!!\n";
	}

	return PIyy;

}


// ---------------------------------------------------------- //
// Function to return PIzz                                    //
// ---------------------------------------------------------- //
double getPIzz( double lam1, double lam2, double e1, double e2 )
{

	// Matrix of coefficients for 1st fit ( 1 >= lambda1 => 5 )
	double A1[16][9] = {
			{ -0.27998281, 0.70544779, -0.06629452, 1.52876532, -1.10673539, 1.38379312, -0.93277465, 1.10184181, 0.64466816 },
			{ -2.35356346, 2.40699044, -1.15772258, 3.63284749, -4.44952996, 0.94444524, -1.32244454, 1.74414198, -1.10147769 },
			{ -3.72498521, 4.61859988, -2.62747590, 3.55859256, -8.82520304, 3.70595570, -1.74504908, 3.68344970, -2.90127818 },
			{ -0.85048647, -2.74991331, 1.57161975, -2.88513470, 6.94175486, -2.36847474, 2.37487476, -3.43462827, 1.73593701 },
			{ 2.51038928, -5.48499666, 2.49015491, -6.07358373, 10.72836164, -4.84542643, 3.25377583, -5.17609836, 2.45552310 },
			{ -0.74404933, -3.32383779, 2.21407970, -1.31133050, 7.67090419, -5.56408173, 1.01647957, -4.97984871, 1.33182151 },
			{ -3.26361314, 3.91395425, -1.68203524, 2.96046938, -6.49063354, 5.34324211, -1.77765087, 5.08779294, -0.87752797 },
			{ -0.18750983, 0.85964745, -0.37798316, 1.33561814, -1.46694618, -0.46517205, -0.99171282, 0.30777011, -0.31067943 },
			{ 5.04865283, 3.37746186, -2.40755181, -1.79430510, -9.45836998, 6.13094890, -0.55739265, 5.43486782, -3.66503402 },
			{ 2.68733189, -3.99551159, 2.02296522, 0.71382404, 6.24145453, -4.46616477, -0.28841727, -3.40278752, 3.42108613 },
			{ 0.12384605, 0.16516065, -0.22845893, -1.14789482, -0.53750281, 0.35931853, 0.71910458, -0.11679774, -0.98999502 },
			{ 0.06594708, -0.19374600, 0.09355149, -0.20544004, 0.30064357, 0.10276689, 0.14216123, -0.01333563, 0.13010582 },
			{ 0.71500539, -0.41852748, 0.34886411, 0.12690493, 1.07123735, -0.85112593, -0.03869747, -0.71195104, 0.54433002 },
			{ 0.37355062, 0.10276538, -0.23860792, -0.75840160, -0.75874640, 0.78711271, 0.30769811, 0.57346951, -0.60921530 },
			{ -0.12460270, 0.00424303, 0.05475369, 0.32815190, 0.16997945, -0.20299724, -0.16181937, -0.10509682, 0.21506520 },
			{ 0.00406924, 0.01226295, -0.00985921, -0.00908361, -0.03066738, 0.00585950, 0.00186560, 0.00720844, -0.02332874 }
	};
	// Matrix of coefficients for 2nd fit ( 5 > lambda1 => 11)
	double A2[16][9] = {
			{ 378.70131051, -643.41488337, 260.80570209, -590.83213960, 773.59698369, -221.94121390, 183.24918817, -19.01451955, -106.82800729 },
			{ -73.69047669, 193.19746059, -92.26086085, 13.25805345, -36.60413773, -4.66788546, 39.65238557, -121.03835814, 83.55576132 },
			{ -80.27228032, 88.70522011, -27.98809441, 191.87122730, -282.91376353, 111.30718858, -92.95197678, 147.49212142, -60.72799094 },
			{ 13.22536736, -18.62357757, 6.44358358, -32.10173507, 50.49590565, -19.86902596, 14.79027205, -24.11804156, 9.60635023 },
			{ -268.78805286, 413.01033772, -162.35152862, 485.20094564, -701.84306936, 247.84427327, -187.01045729, 192.67147888, -32.85812700 },
			{ 149.01546250, -241.52998917, 97.01013542, -265.58806910, 421.41147677, -159.67180051, 102.05642159, -139.24364873, 40.81781136 },
			{ -4.91036414, 11.17907913, -5.47165495, -5.21304263, 2.42393146, -0.49548110, 5.55329068, -8.34128434, 4.22233601 },
			{ -3.11820004, 3.89155851, -1.26502879, 7.31730715, -11.12196172, 4.28947783, -3.44836631, 5.49710682, -2.17231917 },
			{ 54.02552278, -71.43197840, 27.62247273, -94.05142089, 134.33617580, -49.29126621, 37.67857760, -45.73654819, 12.62329547 },
			{ -29.15745948, 46.14462545, -18.19185066, 61.55821174, -96.54846928, 36.97234453, -25.81158089, 37.90175246, -13.00245622 },
			{ 3.54896705, -5.59754230, 2.22062082, -6.44559063, 10.70744573, -4.21607820, 2.53547055, -4.08638636, 1.45858300 },
			{ 0.14924588, -0.15514266, 0.03910659, -0.38732550, 0.55190747, -0.20471435, 0.19378476, -0.29817679, 0.11776139 },
			{ -1.69921019, 3.56243303, -1.36788205, 4.68717014, -7.20745133, 2.68392818, -2.01276960, 2.68196071, -0.84365910 },
			{ 1.81899923, -2.60896100, 0.97496529, -3.57223424, 5.50263845, -2.09418974, 1.54283282, -2.27783434, 0.80635011 },
			{ -0.26548645, 0.38273641, -0.14248211, 0.51678419, -0.81290909, 0.31243806, -0.21979139, 0.34311636, -0.12553913 },
			{ 0.00243768, -0.00486610, 0.00224086, -0.00248955, 0.00538457, -0.00230123, 0.00039484, -0.00089685, 0.00019802 }
	};
	// End matrix of coefficients

	double PIzz = 0.0;

	if ( lam2 > lam1 ) 
	{
		std::cout << "!!! Error, lam2 > lam1, this is not allowed, setting tensor to 0.0 !!!\n" ;
	}
	else if ( lam1 > 1.0 && lam1 <= 5.0 )
	{
		PIzz = eqQ( A1, lam1, lam2, e1, e2 );
	}
	else if ( lam1 > 5.0 && lam1 <= 11.0 )
	{
		PIzz = eqQ( A2, lam1, lam2, e1, e2 );
	}
	else if ( lam1 > 11.0 )
	{
		PIzz = eqQ( A2, lam1, lam2, e1, e2 );
		std::cout << "!!! Warning, outside range, max(lam1) = 11.0, code will run, but result will be garbage !!!\n";
	}
	else
	{
		std::cout << "!!! Unexpected error, setting tensor to 0.0  !!!\n";
	}

	return PIzz;

}